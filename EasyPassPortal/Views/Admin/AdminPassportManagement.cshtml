@model EasyPassPortal.Models.UserPassportDetails

@{
    ViewBag.Title = "AdminPassportManagement";

    // Method to get the filtered status list
    Func<string, List<SelectListItem>> getStatusList = (currentStatus) =>
    {
        var statuses = new List<SelectListItem>
                {
            new SelectListItem { Text = "Police Inquiry", Value = "Police Inquiry" },
            new SelectListItem { Text = "Pending", Value = "Pending" },
            new SelectListItem { Text = "Rejected", Value = "Rejected" },
            new SelectListItem { Text = "Success", Value = "Success" }
                };

        // Include current status in the list
        var currentStatusItem = new SelectListItem { Text = currentStatus, Value = currentStatus };
        statuses.Add(currentStatusItem);

        // Filter the list based on current status
        switch (currentStatus)
        {
            case "Pending":
                return statuses.Where(s => s.Value != "Pending").ToList();
            case "Police Inquiry":
                return statuses.Where(s => s.Value != "Pending" && s.Value != "Police Inquiry").ToList();
            case "Success":
            case "Rejected":
                return new List<SelectListItem> { currentStatusItem }; // Only show the current status
            default:
                return statuses;
        }
    };

    var statusList = getStatusList(Model.Status);
}


<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - EasyPass Portal</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <style>
        body {
            background-color: #f8f9fa;
        }

        .form-container {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .table td, .table th {
            vertical-align: middle;
        }

        .btn-custom {
            background-color: #007bff;
            color: white;
            border: none;
        }

            .btn-custom:hover {
                background-color: #0056b3;
            }
    </style>
</head>
<body>
    <div class="container form-container">
        <h2>AdminPassportManagement</h2>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>UserPassportDetails</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)

                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>@Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                            </td>
                            <th>@Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                        <tr>
                            <th>@Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                            </td>
                            <th>@Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                        <tr>
                            <th>@Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </td>
                            <th>@Html.LabelFor(model => model.Religion, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.Religion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Religion, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                        <tr>
                            <th>@Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                            </td>
                            <th>@Html.LabelFor(model => model.District, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.District, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.District, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                        <tr>
                            <th>@Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                            </td>
                            <th>@Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                        <tr>
                            <th>@Html.LabelFor(model => model.AadharNumber, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.AadharNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AadharNumber, "", new { @class = "text-danger" })
                            </td>
                            <th>@Html.LabelFor(model => model.PancardNumber, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.PancardNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PancardNumber, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                        <tr>
                            <th>@Html.LabelFor(model => model.Education, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.EditorFor(model => model.Education, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Education, "", new { @class = "text-danger" })
                            </td>
                            <th>@Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @if (Model.Image != null && Model.Image.Length > 0)
                                {
                                    var base64Image = Convert.ToBase64String(Model.Image);
                                    <img src="data:image/jpeg;base64,@base64Image" alt="Image Preview" style="max-width: 100px; max-height: 100px;" />
                                }
                                else
                                {
                                    <span>No image available</span>
                                }
                            </td>
                            <th>@Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label" })</th>
                            <td>
                                @Html.DropDownListFor(model => model.Status, statusList, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div>
                    @if (ViewBag.Message != null)
                    {
                        <div class="alert alert-danger" role="alert">
                            @ViewBag.Message
                        </div>
                    }
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-custom" />
                    </div>
                </div>
            </div>
        }
        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
        }
    </div>
</body>
</html>
